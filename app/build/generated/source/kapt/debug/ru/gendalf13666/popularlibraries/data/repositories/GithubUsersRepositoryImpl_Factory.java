// Generated by Dagger (https://dagger.dev).
package ru.gendalf13666.popularlibraries.data.repositories;

import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.gendalf13666.popularlibraries.api.GithubApi;
import ru.gendalf13666.popularlibraries.data.db.cache.GithubCache;
import ru.gendalf13666.popularlibraries.helpers.NetworkStatus;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class GithubUsersRepositoryImpl_Factory implements Factory<GithubUsersRepositoryImpl> {
  private final Provider<GithubApi> githubApiProvider;

  private final Provider<GithubCache> githubCacheProvider;

  private final Provider<NetworkStatus> networkStatusProvider;

  public GithubUsersRepositoryImpl_Factory(Provider<GithubApi> githubApiProvider,
      Provider<GithubCache> githubCacheProvider, Provider<NetworkStatus> networkStatusProvider) {
    this.githubApiProvider = githubApiProvider;
    this.githubCacheProvider = githubCacheProvider;
    this.networkStatusProvider = networkStatusProvider;
  }

  @Override
  public GithubUsersRepositoryImpl get() {
    return newInstance(githubApiProvider.get(), githubCacheProvider.get(), networkStatusProvider.get());
  }

  public static GithubUsersRepositoryImpl_Factory create(Provider<GithubApi> githubApiProvider,
      Provider<GithubCache> githubCacheProvider, Provider<NetworkStatus> networkStatusProvider) {
    return new GithubUsersRepositoryImpl_Factory(githubApiProvider, githubCacheProvider, networkStatusProvider);
  }

  public static GithubUsersRepositoryImpl newInstance(GithubApi githubApi, GithubCache githubCache,
      NetworkStatus networkStatus) {
    return new GithubUsersRepositoryImpl(githubApi, githubCache, networkStatus);
  }
}
