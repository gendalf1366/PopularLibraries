// Generated by Dagger (https://dagger.dev).
package ru.gendalf13666.popularlibraries.baselogic.userrepositories;

import com.github.terrakok.cicerone.Router;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import javax.inject.Provider;
import ru.gendalf13666.popularlibraries.data.repositories.GithubUsersRepository;
import ru.gendalf13666.popularlibraries.helpers.schedules.AppSchedulers;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryPresenter_Factory implements Factory<RepositoryPresenter> {
  private final Provider<GithubUsersRepository> userRepositoryProvider;

  private final Provider<AppSchedulers> appSchedulersProvider;

  private final Provider<Router> router_Provider;

  private final Provider<String> userLoginProvider;

  private final Provider<String> repositoryNameProvider;

  public RepositoryPresenter_Factory(Provider<GithubUsersRepository> userRepositoryProvider,
      Provider<AppSchedulers> appSchedulersProvider, Provider<Router> router_Provider,
      Provider<String> userLoginProvider, Provider<String> repositoryNameProvider) {
    this.userRepositoryProvider = userRepositoryProvider;
    this.appSchedulersProvider = appSchedulersProvider;
    this.router_Provider = router_Provider;
    this.userLoginProvider = userLoginProvider;
    this.repositoryNameProvider = repositoryNameProvider;
  }

  @Override
  public RepositoryPresenter get() {
    return newInstance(userRepositoryProvider.get(), appSchedulersProvider.get(), router_Provider.get(), userLoginProvider.get(), repositoryNameProvider.get());
  }

  public static RepositoryPresenter_Factory create(
      Provider<GithubUsersRepository> userRepositoryProvider,
      Provider<AppSchedulers> appSchedulersProvider, Provider<Router> router_Provider,
      Provider<String> userLoginProvider, Provider<String> repositoryNameProvider) {
    return new RepositoryPresenter_Factory(userRepositoryProvider, appSchedulersProvider, router_Provider, userLoginProvider, repositoryNameProvider);
  }

  public static RepositoryPresenter newInstance(GithubUsersRepository userRepository,
      AppSchedulers appSchedulers, Router router_, String userLogin, String repositoryName) {
    return new RepositoryPresenter(userRepository, appSchedulers, router_, userLogin, repositoryName);
  }
}
