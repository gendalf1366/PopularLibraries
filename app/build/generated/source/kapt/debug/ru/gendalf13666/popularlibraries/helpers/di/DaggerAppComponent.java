// Generated by Dagger (https://dagger.dev).
package ru.gendalf13666.popularlibraries.helpers.di;

import android.content.Context;
import com.github.terrakok.cicerone.NavigatorHolder;
import com.github.terrakok.cicerone.Router;
import dagger.android.AndroidInjector;
import dagger.android.DaggerApplication_MembersInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import java.util.Collections;
import java.util.Map;
import javax.inject.Provider;
import ru.gendalf13666.popularlibraries.App;
import ru.gendalf13666.popularlibraries.api.GithubApi;
import ru.gendalf13666.popularlibraries.baselogic.main.MainActivity;
import ru.gendalf13666.popularlibraries.baselogic.main.MainActivity_MembersInjector;
import ru.gendalf13666.popularlibraries.baselogic.user.UserFragment;
import ru.gendalf13666.popularlibraries.baselogic.user.UserFragment_MembersInjector;
import ru.gendalf13666.popularlibraries.baselogic.userrepositories.RepositoryFragment;
import ru.gendalf13666.popularlibraries.baselogic.userrepositories.RepositoryFragment_MembersInjector;
import ru.gendalf13666.popularlibraries.baselogic.users.UsersFragment;
import ru.gendalf13666.popularlibraries.baselogic.users.UsersFragment_MembersInjector;
import ru.gendalf13666.popularlibraries.data.db.AppDB;
import ru.gendalf13666.popularlibraries.data.db.cache.GithubCache;
import ru.gendalf13666.popularlibraries.data.db.cache.GithubCacheImpl;
import ru.gendalf13666.popularlibraries.data.db.cache.GithubCacheImpl_Factory;
import ru.gendalf13666.popularlibraries.data.repositories.GithubUsersRepository;
import ru.gendalf13666.popularlibraries.data.repositories.GithubUsersRepositoryImpl;
import ru.gendalf13666.popularlibraries.data.repositories.GithubUsersRepositoryImpl_Factory;
import ru.gendalf13666.popularlibraries.data.repositories.UserAvatarRepository;
import ru.gendalf13666.popularlibraries.data.repositories.UserAvatarRepositoryImpl;
import ru.gendalf13666.popularlibraries.data.repositories.UserAvatarRepositoryImpl_Factory;
import ru.gendalf13666.popularlibraries.helpers.NetworkStatus;
import ru.gendalf13666.popularlibraries.helpers.NetworkStatusImpl;
import ru.gendalf13666.popularlibraries.helpers.NetworkStatusImpl_Factory;
import ru.gendalf13666.popularlibraries.helpers.di.modules.ApiModule;
import ru.gendalf13666.popularlibraries.helpers.di.modules.ApiModule_ProvideBaseUrlFactory;
import ru.gendalf13666.popularlibraries.helpers.di.modules.ApiModule_ProvideGithubApiFactory;
import ru.gendalf13666.popularlibraries.helpers.di.modules.DBModule;
import ru.gendalf13666.popularlibraries.helpers.di.modules.DBModule_ProvideAppDBFactory;
import ru.gendalf13666.popularlibraries.helpers.di.modules.UIModule_BindMainActivity;
import ru.gendalf13666.popularlibraries.helpers.di.modules.UIModule_BindRepositoryFragment;
import ru.gendalf13666.popularlibraries.helpers.di.modules.UIModule_BindUserFragment;
import ru.gendalf13666.popularlibraries.helpers.di.modules.UIModule_BindUsersFragment;
import ru.gendalf13666.popularlibraries.helpers.schedules.AppSchedulers;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final NavigatorHolder withNavigationHolder;

  private final Router withRouter;

  private final AppSchedulers withAppScheduler;

  private Provider<UIModule_BindMainActivity.MainActivitySubcomponent.Factory> mainActivitySubcomponentFactoryProvider;

  private Provider<UIModule_BindUserFragment.UserFragmentSubcomponent.Factory> userFragmentSubcomponentFactoryProvider;

  private Provider<UIModule_BindUsersFragment.UsersFragmentSubcomponent.Factory> usersFragmentSubcomponentFactoryProvider;

  private Provider<UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent.Factory> repositoryFragmentSubcomponentFactoryProvider;

  private Provider<String> provideBaseUrlProvider;

  private Provider<GithubApi> provideGithubApiProvider;

  private Provider<Context> withContextProvider;

  private Provider<AppDB> provideAppDBProvider;

  private Provider<GithubCacheImpl> githubCacheImplProvider;

  private Provider<GithubCache> bindGithubCacheProvider;

  private Provider<NetworkStatusImpl> networkStatusImplProvider;

  private Provider<NetworkStatus> bindNetworkStatusProvider;

  private Provider<GithubUsersRepositoryImpl> githubUsersRepositoryImplProvider;

  private Provider<GithubUsersRepository> bindGithubUsersRepositoryProvider;

  private Provider<UserAvatarRepositoryImpl> userAvatarRepositoryImplProvider;

  private Provider<UserAvatarRepository> bindUserAvatarRepositoryProvider;

  private DaggerAppComponent(ApiModule apiModuleParam, DBModule dBModuleParam,
      Context withContextParam, Router withRouterParam, NavigatorHolder withNavigationHolderParam,
      AppSchedulers withAppSchedulerParam) {
    this.withNavigationHolder = withNavigationHolderParam;
    this.withRouter = withRouterParam;
    this.withAppScheduler = withAppSchedulerParam;
    initialize(apiModuleParam, dBModuleParam, withContextParam, withRouterParam, withNavigationHolderParam, withAppSchedulerParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private Map<Class<?>, Provider<AndroidInjector.Factory<?>>> mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(
      ) {
    return MapBuilder.<Class<?>, Provider<AndroidInjector.Factory<?>>>newMapBuilder(4).put(MainActivity.class, (Provider) mainActivitySubcomponentFactoryProvider).put(UserFragment.class, (Provider) userFragmentSubcomponentFactoryProvider).put(UsersFragment.class, (Provider) usersFragmentSubcomponentFactoryProvider).put(RepositoryFragment.class, (Provider) repositoryFragmentSubcomponentFactoryProvider).build();
  }

  private DispatchingAndroidInjector<Object> dispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(mapOfClassOfAndProviderOfAndroidInjectorFactoryOf(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final ApiModule apiModuleParam, final DBModule dBModuleParam,
      final Context withContextParam, final Router withRouterParam,
      final NavigatorHolder withNavigationHolderParam, final AppSchedulers withAppSchedulerParam) {
    this.mainActivitySubcomponentFactoryProvider = new Provider<UIModule_BindMainActivity.MainActivitySubcomponent.Factory>() {
      @Override
      public UIModule_BindMainActivity.MainActivitySubcomponent.Factory get() {
        return new MainActivitySubcomponentFactory();
      }
    };
    this.userFragmentSubcomponentFactoryProvider = new Provider<UIModule_BindUserFragment.UserFragmentSubcomponent.Factory>() {
      @Override
      public UIModule_BindUserFragment.UserFragmentSubcomponent.Factory get() {
        return new UserFragmentSubcomponentFactory();
      }
    };
    this.usersFragmentSubcomponentFactoryProvider = new Provider<UIModule_BindUsersFragment.UsersFragmentSubcomponent.Factory>() {
      @Override
      public UIModule_BindUsersFragment.UsersFragmentSubcomponent.Factory get() {
        return new UsersFragmentSubcomponentFactory();
      }
    };
    this.repositoryFragmentSubcomponentFactoryProvider = new Provider<UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent.Factory>() {
      @Override
      public UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent.Factory get() {
        return new RepositoryFragmentSubcomponentFactory();
      }
    };
    this.provideBaseUrlProvider = ApiModule_ProvideBaseUrlFactory.create(apiModuleParam);
    this.provideGithubApiProvider = DoubleCheck.provider(ApiModule_ProvideGithubApiFactory.create(apiModuleParam, provideBaseUrlProvider));
    this.withContextProvider = InstanceFactory.create(withContextParam);
    this.provideAppDBProvider = DoubleCheck.provider(DBModule_ProvideAppDBFactory.create(dBModuleParam, withContextProvider));
    this.githubCacheImplProvider = GithubCacheImpl_Factory.create(provideAppDBProvider);
    this.bindGithubCacheProvider = DoubleCheck.provider((Provider) githubCacheImplProvider);
    this.networkStatusImplProvider = NetworkStatusImpl_Factory.create(withContextProvider);
    this.bindNetworkStatusProvider = DoubleCheck.provider((Provider) networkStatusImplProvider);
    this.githubUsersRepositoryImplProvider = GithubUsersRepositoryImpl_Factory.create(provideGithubApiProvider, bindGithubCacheProvider, bindNetworkStatusProvider);
    this.bindGithubUsersRepositoryProvider = DoubleCheck.provider((Provider) githubUsersRepositoryImplProvider);
    this.userAvatarRepositoryImplProvider = UserAvatarRepositoryImpl_Factory.create(withContextProvider, bindNetworkStatusProvider);
    this.bindUserAvatarRepositoryProvider = DoubleCheck.provider((Provider) userAvatarRepositoryImplProvider);
  }

  @Override
  public void inject(App arg0) {
    injectApp(arg0);
  }

  private App injectApp(App instance) {
    DaggerApplication_MembersInjector.injectAndroidInjector(instance, dispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Context withContext;

    private Router withRouter;

    private NavigatorHolder withNavigationHolder;

    private AppSchedulers withAppScheduler;

    @Override
    public Builder withContext(Context context) {
      this.withContext = Preconditions.checkNotNull(context);
      return this;
    }

    @Override
    public Builder withRouter(Router router) {
      this.withRouter = Preconditions.checkNotNull(router);
      return this;
    }

    @Override
    public Builder withNavigationHolder(NavigatorHolder navigatorHolder) {
      this.withNavigationHolder = Preconditions.checkNotNull(navigatorHolder);
      return this;
    }

    @Override
    public Builder withAppScheduler(AppSchedulers appSchedulers) {
      this.withAppScheduler = Preconditions.checkNotNull(appSchedulers);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(withContext, Context.class);
      Preconditions.checkBuilderRequirement(withRouter, Router.class);
      Preconditions.checkBuilderRequirement(withNavigationHolder, NavigatorHolder.class);
      Preconditions.checkBuilderRequirement(withAppScheduler, AppSchedulers.class);
      return new DaggerAppComponent(new ApiModule(), new DBModule(), withContext, withRouter, withNavigationHolder, withAppScheduler);
    }
  }

  private final class MainActivitySubcomponentFactory implements UIModule_BindMainActivity.MainActivitySubcomponent.Factory {
    @Override
    public UIModule_BindMainActivity.MainActivitySubcomponent create(MainActivity arg0) {
      Preconditions.checkNotNull(arg0);
      return new MainActivitySubcomponentImpl(arg0);
    }
  }

  private final class MainActivitySubcomponentImpl implements UIModule_BindMainActivity.MainActivitySubcomponent {
    private MainActivitySubcomponentImpl(MainActivity arg0) {

    }

    @Override
    public void inject(MainActivity arg0) {
      injectMainActivity(arg0);
    }

    private MainActivity injectMainActivity(MainActivity instance) {
      BaseDaggerActivity_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      MainActivity_MembersInjector.injectNavigatorHolder(instance, DaggerAppComponent.this.withNavigationHolder);
      MainActivity_MembersInjector.injectRouter(instance, DaggerAppComponent.this.withRouter);
      return instance;
    }
  }

  private final class UserFragmentSubcomponentFactory implements UIModule_BindUserFragment.UserFragmentSubcomponent.Factory {
    @Override
    public UIModule_BindUserFragment.UserFragmentSubcomponent create(UserFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UserFragmentSubcomponentImpl(arg0);
    }
  }

  private final class UserFragmentSubcomponentImpl implements UIModule_BindUserFragment.UserFragmentSubcomponent {
    private UserFragmentSubcomponentImpl(UserFragment arg0) {

    }

    @Override
    public void inject(UserFragment arg0) {
      injectUserFragment(arg0);
    }

    private UserFragment injectUserFragment(UserFragment instance) {
      BaseDaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      UserFragment_MembersInjector.injectRouter(instance, DaggerAppComponent.this.withRouter);
      UserFragment_MembersInjector.injectAppSchedulers(instance, DaggerAppComponent.this.withAppScheduler);
      UserFragment_MembersInjector.injectGithubUsersRepository(instance, DaggerAppComponent.this.bindGithubUsersRepositoryProvider.get());
      UserFragment_MembersInjector.injectUserAvatarRepository(instance, DaggerAppComponent.this.bindUserAvatarRepositoryProvider.get());
      return instance;
    }
  }

  private final class UsersFragmentSubcomponentFactory implements UIModule_BindUsersFragment.UsersFragmentSubcomponent.Factory {
    @Override
    public UIModule_BindUsersFragment.UsersFragmentSubcomponent create(UsersFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new UsersFragmentSubcomponentImpl(arg0);
    }
  }

  private final class UsersFragmentSubcomponentImpl implements UIModule_BindUsersFragment.UsersFragmentSubcomponent {
    private UsersFragmentSubcomponentImpl(UsersFragment arg0) {

    }

    @Override
    public void inject(UsersFragment arg0) {
      injectUsersFragment(arg0);
    }

    private UsersFragment injectUsersFragment(UsersFragment instance) {
      BaseDaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      UsersFragment_MembersInjector.injectRouter(instance, DaggerAppComponent.this.withRouter);
      UsersFragment_MembersInjector.injectAppSchedulers(instance, DaggerAppComponent.this.withAppScheduler);
      UsersFragment_MembersInjector.injectGithubUsersRepository(instance, DaggerAppComponent.this.bindGithubUsersRepositoryProvider.get());
      UsersFragment_MembersInjector.injectUserAvatarRepository(instance, DaggerAppComponent.this.bindUserAvatarRepositoryProvider.get());
      return instance;
    }
  }

  private final class RepositoryFragmentSubcomponentFactory implements UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent.Factory {
    @Override
    public UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent create(
        RepositoryFragment arg0) {
      Preconditions.checkNotNull(arg0);
      return new RepositoryFragmentSubcomponentImpl(arg0);
    }
  }

  private final class RepositoryFragmentSubcomponentImpl implements UIModule_BindRepositoryFragment.RepositoryFragmentSubcomponent {
    private RepositoryFragmentSubcomponentImpl(RepositoryFragment arg0) {

    }

    @Override
    public void inject(RepositoryFragment arg0) {
      injectRepositoryFragment(arg0);
    }

    private RepositoryFragment injectRepositoryFragment(RepositoryFragment instance) {
      BaseDaggerFragment_MembersInjector.injectAndroidInjector(instance, DaggerAppComponent.this.dispatchingAndroidInjectorOfObject());
      RepositoryFragment_MembersInjector.injectRouter(instance, DaggerAppComponent.this.withRouter);
      RepositoryFragment_MembersInjector.injectAppSchedulers(instance, DaggerAppComponent.this.withAppScheduler);
      RepositoryFragment_MembersInjector.injectGithubUsersRepository(instance, DaggerAppComponent.this.bindGithubUsersRepositoryProvider.get());
      return instance;
    }
  }
}
